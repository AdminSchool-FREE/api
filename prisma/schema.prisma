// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Escola {
  id             String           @id @default(uuid())
  nome           String
  Turma          Turma[]
  Usuario        Usuario[]
  ModeloMensagem ModeloMensagem[]
  ReportSistema  ReportSistema[]
  Configuracoes  Configuracoes[]
  Disciplina     Disciplina[]
}

model Turma {
  id       String  @id @default(uuid())
  nome     String
  idEscola String
  escola   Escola  @relation(fields: [idEscola], references: [id])
  Aluno    Aluno[]
}

model Usuario {
  id       String  @id @default(uuid())
  nome     String
  email    String  @unique
  senha    String
  status   Boolean @default(true)
  idEscola String
  escola   Escola  @relation(fields: [idEscola], references: [id])
}

model ModeloMensagem {
  id       String @id @default(uuid())
  assunto  String
  modelo   String @db.LongText
  idEscola String
  escola   Escola @relation(fields: [idEscola], references: [id])
}

model ReportSistema {
  id       String  @id @default(uuid())
  problema String  @db.LongText
  imagem   String? @db.LongText
  idEscola String
  escola   Escola  @relation(fields: [idEscola], references: [id])
}

model Configuracoes {
  id                             String  @id @default(uuid())
  login_api_whatsapp             String? @unique
  senha_api_whatsapp             String?
  token_dispositivo_api_whatsapp String? @unique
  token_api_whatsapp             String? @db.LongText
  idEscola                       String  @unique
  escola                         Escola  @relation(fields: [idEscola], references: [id])
}

model Aluno {
  id                          String                        @id @default(uuid())
  nome                        String
  cpf                         String                        @unique
  ra                          String                        @unique
  rg                          String                        @unique
  dataNascimento              DateTime                      @db.Date
  notificacaoBloqueado        Boolean                       @default(false)
  idTurma                     String
  turma                       Turma                         @relation(fields: [idTurma], references: [id])
  ResponsavelAluno            ResponsavelAluno[]
  NotificacaoResponsavelAluno NotificacaoResponsavelAluno[]
  ChamadaTurma                ChamadaTurma[]
  NotasProvas                 NotasProvas[]
}

model Responsavel {
  id                          String                        @id @default(uuid())
  nome                        String
  cpf                         String                        @unique
  TelefoneResponsavel         TelefoneResponsavel[]
  ResponsavelAluno            ResponsavelAluno[]
  NotificacaoResponsavelAluno NotificacaoResponsavelAluno[]
}

model TelefoneResponsavel {
  id            String      @id @default(uuid())
  ddd           String
  telefone      String      @unique
  whatsapp      Boolean     @default(true)
  idResponsavel String
  responsavel   Responsavel @relation(fields: [idResponsavel], references: [id])
}

model ResponsavelAluno {
  idResponsavel String
  responsavel   Responsavel @relation(fields: [idResponsavel], references: [id])
  idAluno       String
  aluno         Aluno       @relation(fields: [idAluno], references: [id])

  @@id([idAluno, idResponsavel])
}

model NotificacaoResponsavelAluno {
  id            String      @id @default(uuid())
  mensagem      String      @db.LongText
  criadoEm      DateTime    @default(now())
  enviadoEm     DateTime?
  idResponsavel String
  responsavel   Responsavel @relation(fields: [idResponsavel], references: [id])
  idAluno       String
  aluno         Aluno       @relation(fields: [idAluno], references: [id])
}

model ChamadaTurma {
  id          String   @id @default(uuid())
  dataChamada DateTime
  presenca    Boolean  @default(true)
  idAluno     String
  aluno       Aluno    @relation(fields: [idAluno], references: [id])
}

model Disciplina {
  id          String        @id @default(uuid())
  nome        String
  idEscola    String
  escola      Escola        @relation(fields: [idEscola], references: [id])
  NotasProvas NotasProvas[]
}

model NotasProvas {
  id           String      @id @default(uuid())
  nota         Decimal     @default(0)
  ano          String
  tipoPeriodo  TipoPeriodo @default(bimestral)
  periodo      String
  lancamento   DateTime    @default(now())
  descricao    String
  realizadoEm  DateTime?   @db.Date
  idAluno      String
  aluno        Aluno       @relation(fields: [idAluno], references: [id], onDelete: Cascade, onUpdate: Cascade)
  idDisciplina String
  disciplina   Disciplina  @relation(fields: [idDisciplina], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum TipoPeriodo {
  mensal
  bimestral
  trimestral
  semestral
}
